/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;
import Controlador.CategoriaControlador;
import Modelo.Categoria;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.property.TextAlignment;
import com.itextpdf.layout.property.UnitValue;
import java.awt.FileDialog;
import javax.swing.JOptionPane;
/**
 *
 * @author Hassel
 */
public class VistaCategorias extends javax.swing.JPanel {

    /**
     * Creates new form VistaCategorias
     */

    public VistaCategorias() {
        initComponents();
        this.CategoriaControlador = new CategoriaControlador();
cargarDatosTabla();
    }

    private final CategoriaControlador CategoriaControlador;
    private Integer idCategoriaSeleccionada = null;

    private void cargarDatosTabla(){

        //Obtener todas las categorias del controlador
        List<Categoria> categorias = CategoriaControlador.obtenerTodasCategorias();
        
        if ( categorias != null ){
            //Obtener el modelo existente de la tabla 
            DefaultTableModel model = (DefaultTableModel) tablaCategorias.getModel();
            //Limpiar las filas existentes
            model.setRowCount(0);
            
            //Llenar los datos con las categorias
            for (Categoria cat : categorias){
                Object[] row = {
                    cat.getIdCategoria(),
                    cat.getNombreCategoria(),
                    cat.getDescripcionCategoria()
                };
                model.addRow(row);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        textNombreCategoria = new javax.swing.JTextField();
        textDescripcionCategoria = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        textBuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCategorias = new javax.swing.JTable();
        btnActualizar = new javax.swing.JButton();
        btnGenerarReporte = new javax.swing.JButton();

        jLabel2.setText("nombre_categoria");

        textNombreCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNombreCategoriaActionPerformed(evt);
            }
        });

        textDescripcionCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textDescripcionCategoriaActionPerformed(evt);
            }
        });

        jLabel3.setText("descripcion_categoria");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonGuardar(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonEliminar(evt);
            }
        });

        textBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBuscarActionPerformed(evt);
            }
        });
        textBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuscarKeyTyped(evt);
            }
        });

        tablaCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID categoria", "Nombre", "Descripcion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCategorias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCategoriaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCategorias);

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonActualizar(evt);
            }
        });

        btnGenerarReporte.setText("Generar Reportes");
        btnGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonGenerarReporte(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textNombreCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(textDescripcionCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(textBuscar))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(btnGenerarReporte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textDescripcionCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textNombreCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textNombreCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNombreCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNombreCategoriaActionPerformed

    private void textDescripcionCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textDescripcionCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textDescripcionCategoriaActionPerformed

    private void accionBotonGuardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonGuardar
        // TODO add your handling code here:
        
       String nombre = textNombreCategoria.getText();
       String descripcion = textDescripcionCategoria.getText();
       
       if (!nombre.isEmpty()&&!descripcion.isEmpty()){
           CategoriaControlador.crearCategoria(nombre, descripcion);
           cargarDatosTabla();
           textNombreCategoria.setText("");
           textDescripcionCategoria.setText("");
       } else{
           javax.swing.JOptionPane.showMessageDialog(this,"Por favor llene todos los campos,", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_accionBotonGuardar

    private void textBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBuscarActionPerformed

    private void accionBotonEliminar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonEliminar
        // TODO add your handling code here:
        int filaSeleccionada=tablaCategorias.getSelectedRow();
        if (filaSeleccionada !=-1){
            
            int idCategoria = (int) tablaCategorias.getValueAt(filaSeleccionada, 0);
            CategoriaControlador.eliminarCategoria(idCategoria);
            cargarDatosTabla();
        }else{
            javax.swing.JOptionPane.showMessageDialog(this, "Selecciona una fila para eliminar.", "Error" , javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accionBotonEliminar

    private void tablaCategoriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCategoriaMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount()==2) {
            int filaSeleccionada = tablaCategorias.getSelectedRow();
            
            if (filaSeleccionada !=-1) {
                
                idCategoriaSeleccionada = (int) tablaCategorias.getValueAt(filaSeleccionada, 0);
                String nombre = (String) tablaCategorias.getValueAt(filaSeleccionada, 1);
                String descripcion = (String) tablaCategorias.getValueAt(filaSeleccionada, 2);
                
                textNombreCategoria.setText(nombre);
                textDescripcionCategoria.setText(descripcion);
                
                btnEliminar.setEnabled(false);
                btnGuardar.setEnabled(false);
                
            }
        }
    }//GEN-LAST:event_tablaCategoriaMouseClicked

    private void accionBotonActualizar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonActualizar
        // TODO add your handling code here:
        String nombre = textNombreCategoria.getText();
    String descripcion = textDescripcionCategoria.getText();

    if (idCategoriaSeleccionada != null && !nombre.isEmpty() && !descripcion.isEmpty()) {
        CategoriaControlador.actualizarCategoria(idCategoriaSeleccionada, nombre, descripcion);
        cargarDatosTabla();

        textNombreCategoria.setText("");
        textDescripcionCategoria.setText("");
        idCategoriaSeleccionada = null;

        btnEliminar.setEnabled(true);
        btnGuardar.setEnabled(true);
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, llene todos los campos.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_accionBotonActualizar

    private void textBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscarKeyTyped
        // TODO add your handling code here:
         String textoBusqueda = textBuscar.getText().trim().toLowerCase();
    List<Categoria> categorias = CategoriaControlador.obtenerTodasCategorias();

    DefaultTableModel modelo = (DefaultTableModel) tablaCategorias.getModel();
    modelo.setRowCount(0);

    if (categorias != null) {
        for (Categoria cat : categorias) {
            if (textoBusqueda.isEmpty() ||
                cat.getNombreCategoria().toLowerCase().contains(textoBusqueda) ||
                cat.getDescripcionCategoria().toLowerCase().contains(textoBusqueda)) {
                
                Object[] fila = {
                    cat.getIdCategoria(),
                    cat.getNombreCategoria(),
                    cat.getDescripcionCategoria()
                };
                modelo.addRow(fila);
            }
        }
    }
    }//GEN-LAST:event_textBuscarKeyTyped

    private void accionBotonGenerarReporte(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonGenerarReporte
        // TODO add your handling code here:
         try {
            FileDialog dialogoArchivo = new FileDialog((java.awt.Frame) null, "Guardar Reporte PDF", FileDialog.SAVE);
            dialogoArchivo.setFile("ReporteCategorías.pdf");
            dialogoArchivo.setVisible(true);
            // logica para generar reporte PDF
    

        String ruta = dialogoArchivo.getDirectory();
        String nombreArchivo = dialogoArchivo.getFile();

        if (ruta == null || nombreArchivo == null) {
            JOptionPane.showMessageDialog(this, "Operación cancelada.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String rutaCompleta = ruta + nombreArchivo;

        PdfWriter escritor = new PdfWriter(rutaCompleta);
        PdfDocument pdf = new PdfDocument(escritor);
        Document documento = new Document(pdf);

        documento.add(new Paragraph("Reporte de Categorias")
                .setTextAlignment(TextAlignment.CENTER)
                .setFontSize(20)
                .setBold());
        documento.add(new Paragraph("Fecha:" + new java.util.Date().toString())
        .setTextAlignment(TextAlignment.CENTER)
        .setFontSize(12));
        
        Table tabla = new Table(3);
        tabla.setWidth(UnitValue.createPercentValue(100));
        tabla.addHeaderCell("ID Categoria").setBold();
        tabla.addHeaderCell("Nombre").setBold();
        tabla.addHeaderCell("Descripcion").setBold();
        
        List<Categoria> listaCategorias=
                CategoriaControlador.obtenerTodasCategorias();
        if (listaCategorias !=null) {
            for (Categoria categoria : listaCategorias) {
                tabla.addCell(String.valueOf(categoria.getIdCategoria()));
                tabla.addCell(categoria.getNombreCategoria());
                tabla.addCell(categoria.getDescripcionCategoria());
            }
        }
        
        documento.add(tabla);
        
        documento.add(new Paragraph("Notas: Reporte generado automaticamente desde el sistema.")
        .setFontSize(10)
        .setMarginTop(20));
        
        documento.close();
        
        JOptionPane.showMessageDialog(
                this,
                "Reporte PDF generado con exito en: " + rutaCompleta,
                "Exito", JOptionPane.INFORMATION_MESSAGE);
        
       // logica para generar reporte PDF
    }
    catch (Exception e ) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(
                this,
                "Error al generar el PDF: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);

       }
    }//GEN-LAST:event_accionBotonGenerarReporte


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGenerarReporte;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaCategorias;
    private javax.swing.JTextField textBuscar;
    private javax.swing.JTextField textDescripcionCategoria;
    private javax.swing.JTextField textNombreCategoria;
    // End of variables declaration//GEN-END:variables
}
