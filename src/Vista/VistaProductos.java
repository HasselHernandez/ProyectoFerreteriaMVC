/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;
import Controlador.ProductoControlador;
import Controlador.CategoriaControlador;
import Modelo.Producto;
import Modelo.Categoria;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Hassel
 */
public class VistaProductos extends javax.swing.JPanel {
    
    private final ProductoControlador ProductoControlador;
    private Integer idProductoSeleccionado = null;
    private final CategoriaControlador CategoriaControlador;
    private Integer idCategoriaSeleccionado = null;
    /**
     * Creates new form VistaProductos
     */
    public VistaProductos() {
        initComponents();
        this.ProductoControlador = new ProductoControlador();
        this.CategoriaControlador = new CategoriaControlador();
        cargarDatosTabla();
        cargarCategorias();
        
    }
    
            private void limpiar() {
        textNombreProducto.setText("");
        textDescripcionProducto.setText("");
        textPrecioUnitario.setText("");
        textStock.setText("");
        textImagen.setText("");
        textBuscar.setText("");
        idProductoSeleccionado = null;
        btnEliminar.setEnabled(true);
        btnGuardar.setEnabled(true);
        }
            
              private void cargarDatosTabla() {
    List<Producto> productos = ProductoControlador.obtenerTodosProductos();
    if (productos != null) {
    DefaultTableModel model = (DefaultTableModel) tablaProductos.getModel();
    model.setRowCount(0);
    for (Producto pro : productos) {
    Object[] row = {
    pro.getIdProducto(),
    pro.getNombreProducto(),
    pro.getDescripcionProducto(),
    pro.getIdCategoria(),
    pro.getPrecioUnitario(),
    pro.getStock(),
    pro.getImagen()
    };
    model.addRow(row);
    }
    }
    }
        
                private void cargarCategorias() {
        try {
        // Obtener las categorías desde el controlador
        List<Categoria> categorias =
        CategoriaControlador.obtenerTodasCategorias();
        // Limpiar el combo box por si tiene datos
        comboCategorias.removeAllItems();
        // Agregar cada categoría al combo box
        for (Categoria cat : categorias) {
        comboCategorias.addItem(cat.getNombreCategoria());
        }
        } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
        "Error al cargar las categorías: " + e.getMessage());
        }
        }
               
                
                private void eventoComboCategorias() {
    comboCategorias.addActionListener(e -> {
        // Obtener el índice seleccionado
        int indiceSeleccionado = comboCategorias.getSelectedIndex();

        if (indiceSeleccionado >= 0) { // Verificar que se haya seleccionado algo
            try {
                // Obtener la lista de categorías desde el controlador o memoria
                List<Categoria> categorias = CategoriaControlador.obtenerTodasCategorias();

                // Obtener el objeto de categoría correspondiente al índice seleccionado
                Categoria categoriaSeleccionada = categorias.get(indiceSeleccionado);

                // Actualizar la variable global con el ID de la categoría seleccionada
                idCategoriaSeleccionado = categoriaSeleccionada.getIdCategoria();

                // Mostrar el ID seleccionado en la consola (puedes quitar esta línea)
                System.out.println("ID de la categoría seleccionada: " + idCategoriaSeleccionado);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al seleccionar categoría: " + ex.getMessage());
            }
        }
    });
}
                
                private void seleccionarCategoriaEnCombo(Integer idCategoria) {
    try {
        // Obtener las categorías desde el controlador
        List<Categoria> categorias = CategoriaControlador.obtenerTodasCategorias();

        // Recorrer las categorías y buscar la que coincida con el ID
        for (int i = 0; i < categorias.size(); i++) {
            Categoria categoria = categorias.get(i);
            if (categoria.getIdCategoria() == idCategoria) {
                comboCategorias.setSelectedIndex(i);
                break;
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al seleccionar categoría: " + e.getMessage());
    }
}

                
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textNombreProducto = new javax.swing.JTextField();
        textDescripcionProducto = new javax.swing.JTextField();
        textPrecioUnitario = new javax.swing.JTextField();
        textStock = new javax.swing.JTextField();
        textImagen = new javax.swing.JTextField();
        comboCategorias = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        textBuscar = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();

        jLabel1.setText("Nombre");

        jLabel2.setText("Descripcion");

        jLabel3.setText("Categoria");

        jLabel4.setText("Precio Unitario");

        jLabel5.setText("Stock");

        jLabel6.setText("Imagen");

        comboCategorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Buscar");

        textBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuscarKeyTyped(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonLimpiar(evt);
            }
        });

        btnGuardar.setText("Guardar ");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idCategoriaSeleccionado(evt);
            }
        });

        btnEliminar.setText("Eliminar ");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonEliminar(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonActualizar(evt);
            }
        });

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Empleado", "Nombre", "Descripcion", "ID Categoria", "Precio ", "Stock", "Imagen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaProductos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textDescripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addComponent(textBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(comboCategorias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textPrecioUnitario)
                            .addComponent(jLabel4)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5)
                            .addComponent(textStock)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19))))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textNombreProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(textDescripcionProducto)
                    .addComponent(textPrecioUnitario)
                    .addComponent(comboCategorias)
                    .addComponent(textStock)
                    .addComponent(textImagen))
                .addGap(41, 41, 41)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textBuscar)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void idCategoriaSeleccionado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idCategoriaSeleccionado
        // TODO add your handling code here:
         String nombreProducto = textNombreProducto.getText();
    String descripcionProducto = textDescripcionProducto.getText();
    int idCategoria = idCategoriaSeleccionado;
    float precioUnitario = Float.parseFloat(textPrecioUnitario.getText());
    int stock = Integer.parseInt(textPrecioUnitario.getText());
    String imagen = textImagen.getText();

    if (!nombreProducto.isEmpty() &&
        !descripcionProducto.isEmpty() &&
        precioUnitario >= 0 &&
        stock >= 0) {
        try {
            ProductoControlador.crearProducto(
                nombreProducto,
                descripcionProducto,
                idCategoria,
                precioUnitario,
                stock,
                imagen);
            limpiar();
            cargarDatosTabla();
            cargarCategorias();
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Error en los datos: " + e.getMessage(),
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    } else {
        javax.swing.JOptionPane.showMessageDialog(this,
            "Por favor, llene todos los campos obligatorios correctamente.",
            "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_idCategoriaSeleccionado

    private void accionBotonEliminar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonEliminar
        // TODO add your handling code here:
    int filaSeleccionada = tablaProductos.getSelectedRow();
    if (filaSeleccionada != -1) {
        int idProducto = (int) tablaProductos.getValueAt(filaSeleccionada, 0);
        ProductoControlador.eliminarProducto(idProducto);
        cargarDatosTabla();
    } else {
        javax.swing.JOptionPane.showMessageDialog(this,
            "Selecciona una fila para eliminar.",
            "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }   
    }//GEN-LAST:event_accionBotonEliminar

    private void tablaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductosMouseClicked
        // TODO add your handling code here:                                    
    // Verifica si fue un doble clic
    if (evt.getClickCount() == 2) {
        // Obtener la fila seleccionada
        int filaSeleccionada = tablaProductos.getSelectedRow();

        if (filaSeleccionada != -1) {
            // Obtener el modelo de la tabla
            DefaultTableModel model = (DefaultTableModel) tablaProductos.getModel();

            // Extraer los datos de la fila seleccionada
            idProductoSeleccionado = (Integer) model.getValueAt(filaSeleccionada, 0);
            String nombreProducto = (String) model.getValueAt(filaSeleccionada, 1);
            String descripcionProducto = (String) model.getValueAt(filaSeleccionada, 2);
            Integer idCategoria = (Integer) model.getValueAt(filaSeleccionada, 3);
            Float precioUnitario = (Float) model.getValueAt(filaSeleccionada, 4);
            Integer stock = (Integer) model.getValueAt(filaSeleccionada, 5);
            String imagen = (String) model.getValueAt(filaSeleccionada, 6);

            // Asignar los valores a los campos de texto
            textNombreProducto.setText(nombreProducto);
            textDescripcionProducto.setText(descripcionProducto);
            textPrecioUnitario.setText(precioUnitario.toString());
            textStock.setText(stock.toString());
            textImagen.setText(imagen);

            // Seleccionar la categoría correspondiente en el combo
            seleccionarCategoriaEnCombo(idCategoria);
            idCategoriaSeleccionado = idCategoria;

            // Deshabilitar el botón Eliminar y Guardar si es necesario
            btnEliminar.setEnabled(false);
            btnGuardar.setEnabled(false);
        }
    }
    }//GEN-LAST:event_tablaProductosMouseClicked

    private void accionBotonActualizar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonActualizar
        // TODO add your handling code here:                                   
    String nombreProducto = textNombreProducto.getText();
    String descripcionProducto = textDescripcionProducto.getText();
    int idCategoria = idCategoriaSeleccionado;
    float precioUnitario = Float.parseFloat(textPrecioUnitario.getText());
    int stock = Integer.parseInt(textStock.getText());
    String imagen = textImagen.getText();

    if (idProductoSeleccionado != null &&
        !nombreProducto.isEmpty() &&
        !descripcionProducto.isEmpty() &&
        idCategoria >= 0 &&
        stock >= 0) {

        try {
            ProductoControlador.actualizarProducto(
                idProductoSeleccionado,
                nombreProducto,
                descripcionProducto,
                idCategoria,
                precioUnitario,
                stock,
                imagen
            );
            cargarDatosTabla(); // Vuelve a cargar los datos en la tabla después de actualizar
            limpiar(); // Limpia los campos
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Error en los datos: " + e.getMessage(),
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    } else {
        javax.swing.JOptionPane.showMessageDialog(this,
            "Por favor, llene todos los campos obligatorios.",
            "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_accionBotonActualizar

    private void textBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscarKeyTyped
        // TODO add your handling code here:                                 
    String textoBusqueda = textBuscar.getText().trim().toLowerCase();
    List<Producto> productos = ProductoControlador.obtenerTodosProductos();

    DefaultTableModel modelo = (DefaultTableModel) tablaProductos.getModel();
    modelo.setRowCount(0); // Limpia la tabla antes de mostrar los resultados

    if (productos != null) {
        for (Producto pro : productos) {
            // Busca coincidencias en los campos del producto
            if (textoBusqueda.isEmpty() || // Si el campo de búsqueda está vacío, muestra todos
                pro.getNombreProducto().toLowerCase().contains(textoBusqueda) ||
                pro.getDescripcionProducto().toLowerCase().contains(textoBusqueda) ||
                String.valueOf(pro.getIdCategoria()).contains(textoBusqueda) ||
                String.valueOf(pro.getPrecioUnitario()).contains(textoBusqueda) ||
                String.valueOf(pro.getStock()).contains(textoBusqueda)) {
                
                Object[] fila = {
                    pro.getIdProducto(),
                    pro.getNombreProducto(),
                    pro.getDescripcionProducto(),
                    pro.getIdCategoria(),
                    pro.getPrecioUnitario(),
                    pro.getStock(),
                    pro.getImagen()
                };
                modelo.addRow(fila); // Agrega la fila a la tabla
            }
        }
    }
    }//GEN-LAST:event_textBuscarKeyTyped

    private void accionBotonLimpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonLimpiar
        // TODO add your handling code here:
        limpiar ();
    }//GEN-LAST:event_accionBotonLimpiar


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> comboCategorias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTextField textBuscar;
    private javax.swing.JTextField textDescripcionProducto;
    private javax.swing.JTextField textImagen;
    private javax.swing.JTextField textNombreProducto;
    private javax.swing.JTextField textPrecioUnitario;
    private javax.swing.JTextField textStock;
    // End of variables declaration//GEN-END:variables
}
